# Импорт модуля для работы с IP-адресами и подсетями
import ipaddress

# Функция для определения подсети по IP и маске
def find_subnet(ip_str, mask_str):
    # Создаем объект сети из IP и маски
    # strict=False позволяет указывать любой IP в подсети (не только network address)
    network = ipaddress.ip_network(f"{ip_str}/{mask_str}", strict=False)
    return network  # Возвращаем объект подсети

# Проверка, что скрипт запущен напрямую (а не импортирован как модуль)
if __name__ == '__main__':
    # Запрашиваем у пользователя IP-адрес
    ip = input("Введите IP-адрес: ")
    # Запрашиваем маску (можно вводить как префикс, так и полную маску)
    mask = input("Введите маску подсети (например, 24 или 255.255.255.0): ")

    # Пытаемся преобразовать маску в число (если введен префикс)
    try:
        # Если маска уже в числовом формате (например, 24)
        prefix = int(mask)
    except ValueError:
        # Если маска в формате 255.255.255.0
        # Создаем временную сеть с нулевым IP, чтобы извлечь префикс
        prefix = ipaddress.IPv4Network(f"0.0.0.0/{mask}").prefixlen

    # Вызываем функцию для определения подсети
    subnet = find_subnet(ip, prefix)
    # Выводим результат
    print(f"Подсеть для IP {ip} с маской {mask}: {subnet}")